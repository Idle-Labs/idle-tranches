{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x3D63c50AD04DD5aE394CAB562b7691DD5de7CF6f",
    "txHash": "0xd52ddca85bcf97ce02d1ade9d51cf02293e11a17254337ef8f5990fad916ff77"
  },
  "proxies": [
    {
      "address": "0xEc470753b56Ced3784ce29DB7C297f0C1b75fC87",
      "txHash": "0x783962414cee0564443771f221b211bf1bbaa51973044c831ea666657a95aad1",
      "kind": "transparent"
    },
    {
      "address": "0xB144eE58679e15f1b25A5F6EfcEBDd0AB8c8BEF5",
      "txHash": "0xda03883d2a57efa3ba01161621d1c0902990cd090c68e294b02f6f55a6aa0e3b",
      "kind": "transparent"
    },
    {
      "address": "0x5322471a7E37Ac2B8902cFcba84d266b37D811A0",
      "txHash": "0x9af0e9fde76490a2b62cd8f73ce34bfcd8fb74b928a63e80d24d80c7c288884a",
      "kind": "transparent"
    },
    {
      "address": "0x103A3b128991781EE2c8db0454cA99d67b257923",
      "txHash": "0x835e0b3b3b368c6d213be4e21447cfc2506d095a36bab7f14d29349452a6eb06",
      "kind": "transparent"
    }
  ],
  "impls": {
    "f5d20a615686ac321f4591c9f5ebda5e10fd76d37480f7ff77b7158abdcd6ca5": {
      "address": "0x0E90CF05aCB23D8DFa856A74e74a165C6A7aF8b3",
      "txHash": "0x7ef214c4cc360c796a76619c934e6056f005e24dd799672625a7af09a3f51814",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:309"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "strategyToken",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:39"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "token",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:41"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "oneToken",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:43"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "tokenDecimals",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:45"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "baseToken",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:48"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "cxToken",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:49"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "stakingRewards",
            "type": "t_contract(IStakingDualRewards)30248",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:52"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "quickRouter",
            "type": "t_contract(IUniswapV2Router02)30641",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:55"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "idleCDO",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:58"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "lastIndexAmount",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:61"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "lastIndexedTime",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:64"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "lastApr",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:67"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "releaseBlocksPeriod",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:70"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "latestHarvestBlock",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:73"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "totalLpTokensStaked",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:76"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "totalLpTokensLocked",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:79"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IStakingDualRewards)30248": {
            "label": "contract IStakingDualRewards"
          },
          "t_contract(IUniswapV2Router02)30641": {
            "label": "contract IUniswapV2Router02"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "c52435484a2ef6c2c9f2d3197111483faa96740f9b012999fd56699ebce1bd7d": {
      "address": "0x710426B69e50863b1689F36DC324265C7DD076C9",
      "txHash": "0x8dbd4b3581fbd8cb335ad86a9391596deb3e4a9441f96f3ac4cad41093f741be",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "GuardedLaunchUpgradable",
            "label": "limit",
            "type": "t_uint256",
            "src": "contracts/GuardedLaunchUpgradable.sol:23"
          },
          {
            "contract": "GuardedLaunchUpgradable",
            "label": "governanceRecoveryFund",
            "type": "t_address",
            "src": "contracts/GuardedLaunchUpgradable.sol:25"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "_lastCallerBlock",
            "type": "t_bytes32",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:14"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "latestHarvestBlock",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:16"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "weth",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:18"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "incentiveTokens",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:20"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "token",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:22"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "guardian",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:24"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "oneToken",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:26"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "rebalancer",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:28"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "uniswapRouterV2",
            "type": "t_contract(IUniswapV2Router02)2724",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:30"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "allowAAWithdraw",
            "type": "t_bool",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:33"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "allowBBWithdraw",
            "type": "t_bool",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:35"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "revertIfTooLow",
            "type": "t_bool",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:38"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "skipDefaultCheck",
            "type": "t_bool",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:40"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "strategy",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:43"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "strategyToken",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:45"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "AATranche",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:47"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "BBTranche",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:49"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "AAStaking",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:51"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "BBStaking",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:53"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "trancheAPRSplitRatio",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:57"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "trancheIdealWeightRatio",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:60"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "priceAA",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:62"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "priceBB",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:64"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "lastNAVAA",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:66"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "lastNAVBB",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:68"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "lastStrategyPrice",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:70"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "unclaimedFees",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:72"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "unlentPerc",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:74"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:77"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "feeReceiver",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:79"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "idealRange",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:82"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "releaseBlocksPeriod",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:84"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "harvestedRewards",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:86"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "isStkAAVEActive",
            "type": "t_bool",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:92"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "referral",
            "type": "t_address",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:94"
          },
          {
            "contract": "IdleCDOStoragePolygon",
            "label": "feeSplit",
            "type": "t_uint256",
            "src": "contracts/polygon/IdleCDOStoragePolygon.sol:96"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IUniswapV2Router02)2724": {
            "label": "contract IUniswapV2Router02"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3e30f073214f59852d39ef30926b2b95b045532c9248aeb754abec1122ea8583": {
      "address": "0xAC253DaA41190Df771a9D878CBE7791CBE682E86",
      "txHash": "0x43a0b2029ec5082932be1a6e4e74e7ce1fdb49c24453ed5c1f8768246c930678",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:309"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "strategyToken",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:39"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "token",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:41"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "oneToken",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:43"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "tokenDecimals",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:45"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "baseToken",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:48"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "cxToken",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:49"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "stakingRewards",
            "type": "t_contract(IStakingDualRewards)29519",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:52"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "quickRouter",
            "type": "t_contract(IUniswapV2Router02)29912",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:55"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "idleCDO",
            "type": "t_address",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:58"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "lastIndexAmount",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:61"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "lastIndexedTime",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:64"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "lastApr",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:67"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "releaseBlocksPeriod",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:70"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "latestHarvestBlock",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:73"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "totalLpTokensStaked",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:76"
          },
          {
            "contract": "CelsiusxStrategy",
            "label": "totalLpTokensLocked",
            "type": "t_uint256",
            "src": "quickswap-PYT/src/CelsiusxStrategy.sol:79"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IStakingDualRewards)29519": {
            "label": "contract IStakingDualRewards"
          },
          "t_contract(IUniswapV2Router02)29912": {
            "label": "contract IUniswapV2Router02"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "204c368925c1fda8cd6298e0ca98c6b418438f006229ff624f71e3580c507e26": {
      "address": "0x313F922BE1649cEc058EC0f076664500c78bdc0b",
      "txHash": "0x09bd45e44f06f6e86bed58b552ff5fda160495978cb699562d7cab2da3d500d0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:309"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "token",
            "type": "t_address",
            "src": "contracts/IdleTokenFungible.sol:28"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "rebalancer",
            "type": "t_address",
            "src": "contracts/IdleTokenFungible.sol:30"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "feeAddress",
            "type": "t_address",
            "src": "contracts/IdleTokenFungible.sol:32"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "tokenDecimals",
            "type": "t_uint256",
            "src": "contracts/IdleTokenFungible.sol:34"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "maxUnlentPerc",
            "type": "t_uint256",
            "src": "contracts/IdleTokenFungible.sol:36"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "fee",
            "type": "t_uint256",
            "src": "contracts/IdleTokenFungible.sol:38"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "allAvailableTokens",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/IdleTokenFungible.sol:40"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "lastAllocations",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/IdleTokenFungible.sol:43"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "protocolWrappers",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/IdleTokenFungible.sol:45"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "_minterBlock",
            "type": "t_bytes32",
            "src": "contracts/IdleTokenFungible.sol:47"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "lastRebalancerAllocations",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/IdleTokenFungible.sol:55"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "lastNAV",
            "type": "t_uint256",
            "src": "contracts/IdleTokenFungible.sol:58"
          },
          {
            "contract": "IdleTokenFungible",
            "label": "unclaimedFees",
            "type": "t_uint256",
            "src": "contracts/IdleTokenFungible.sol:60"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bf707142ae728c3824035ca9258c0857b049e1ec38c236f20342ee77266032cb": {
      "address": "0x90c84237fDdf091b1E63f369AF122EB46000bc70",
      "txHash": "0x5e138b8b9fa8354b6d20b47482f77cbf9b49e40c30b4fb788fedddf2bae48260",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:30"
          },
          {
            "contract": "IdleRebalancerHelperJunior",
            "label": "uniswapRouter",
            "type": "t_contract(IUniswapV2Router02)1349",
            "src": "contracts/utils/IdleRebalancerHelperJunior.sol:63"
          },
          {
            "contract": "IdleRebalancerHelperJunior",
            "label": "owner",
            "type": "t_address",
            "src": "contracts/utils/IdleRebalancerHelperJunior.sol:64"
          },
          {
            "contract": "IdleRebalancerHelperJunior",
            "label": "contractDatas",
            "type": "t_mapping(t_address,t_struct(ContractData)1471_storage)",
            "src": "contracts/utils/IdleRebalancerHelperJunior.sol:66"
          },
          {
            "contract": "IdleRebalancerHelperJunior",
            "label": "allContractDatas",
            "type": "t_array(t_struct(ContractData)1471_storage)dyn_storage",
            "src": "contracts/utils/IdleRebalancerHelperJunior.sol:67"
          }
        ],
        "types": {
          "t_contract(IUniswapV2Router02)1349": {
            "label": "contract IUniswapV2Router02"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(ContractData)1471_storage)": {
            "label": "mapping(address => struct IdleRebalancerHelperJunior.ContractData)"
          },
          "t_struct(ContractData)1471_storage": {
            "label": "struct IdleRebalancerHelperJunior.ContractData",
            "members": [
              {
                "label": "token",
                "type": "t_address"
              },
              {
                "label": "protocolDatas",
                "type": "t_array(t_struct(ClearLikeData)1482_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(ClearLikeData)1482_storage)dyn_storage": {
            "label": "struct IdleRebalancerHelperJunior.ClearLikeData[]"
          },
          "t_struct(ClearLikeData)1482_storage": {
            "label": "struct IdleRebalancerHelperJunior.ClearLikeData",
            "members": [
              {
                "label": "token",
                "type": "t_address"
              },
              {
                "label": "cdo",
                "type": "t_address"
              },
              {
                "label": "tranche",
                "type": "t_address"
              },
              {
                "label": "cpTokenLike",
                "type": "t_address"
              },
              {
                "label": "reward",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_struct(ContractData)1471_storage)dyn_storage": {
            "label": "struct IdleRebalancerHelperJunior.ContractData[]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
